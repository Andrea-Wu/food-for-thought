TODO
-integrate forms...done
-implement registration...users added to db
-make user.is_authenticated work with sha256 password hashing...done
-right now, I'm redirecting to /err when I don't know what to do...done 
-fix stupid db workaround where there's a try/catch in User init
-maybe make the secret key something secret
-access the "register" page from the "login" page...done
-the "confirm" field doesn't match "password", but it still registers...done
-deal with validation errors...done
-tell users why their login/registration was bad
-make a frontend
-make a logout...done
-why can user access the dashboard without being logged in?...done
-add logged in user's name to the dashboard...done
-implement the challenges list
    -there will be (20) challenges
    -function that displays a challenge as a html page, via templates
        -function will take in an integer. if user tries to access it otherwise, err
-add an admin page, for convenience
-set up mongoengine to work with multiple collections...done
-the variable totalChallenges is now global. Make sure it is mutex locked
-make sure each user stores info about what active challenges they currently have...done
-create the "actives" page...done
-create a decorator function to make sure some pgs can only be accessd from certain pgs
-what if user manually changes url parameters? 
    -make sure user has permission to access specific challenge...done
-put stats on dashboard
-create challenges page
-auto-logout after a certain time
-prevent registration if username already exists...done

TODO urgent
-make a javascript timer thing that counts down when an argument is passed into it...done
-when user requests first challenge, timer shows negative times. 
    -solve by not showing timer when user successfully gets a challenge...done

IMPLEMENTATION
-store active challenges as a Listfield. 
-create a separate collection that only stores a list of ints




Test User Info:
My name is Yon Yonson,
I live in Wisconsin.
I work in a lumber yard there.
The people I meet as
I walk down the street,
They say "Hello!"
I say "Hello!"
They say "What's your name."
I say: My name is Yon Yonson...


my fucking debugging log:
WTFORMS
    -note that wtforms and flask_wtf behave extremely differently. 
    -I didn't realize that the csrf token had to be called form.csrf_token, not form.csrf
    -flask wtforms has a debugging log: this will be useful for future things
    what is causing validators to break?
        -submit button has to be a SubmitField button in forms.py?
        -MUST use forms.validate_on_submit(), not forms.validate() && request == POST
            -option2 fixed it, but not sure if option1 makes a difference. test later. 
IS_AUTHENTICATED
    -flask_login expects the user's primary key to be called "id".
    -it should be called "id" in User.py, so that the UserMixin can use it properly
    -not sure if it needs to be called "id" in models.py.
LOGIN_REQUIRED
    -the login_required decorator must be used after the app.route decorator
USER
    -there is no point of storing the password in user.py
    -load_user has to return a legit User object. (flask documentation was abstraction)
REQUEST.args
    -are different than the arguments passed to a function
JAVASCRIPT INTEGRATION
    -the "onload" function should be an attribute of the "body" tag. Can't be attached to JUST ANY old tag




